@startuml

[*] --> Finished

Finished --> Checking : CheckIfLag(x) / request LedgerStatuses(x) from others
Finished --> CatchingUpLedgers : StartCatchup / lastTxn3PCs = []; StartLedgerCatchup(0)

state Checking_LedgerStatus <<choice>>
Checking --> Checking_LedgerStatus : LedgerStatus(x)
Checking --> CatchingUpLedgers : StartCatchup / lastTxn3PCs = []; StartLedgerCatchup(0)

state Checking_LedgerStatus_Newer <<choice>>
Checking_LedgerStatus --> Checking_LedgerStatus_Newer : [newer]
state Checking_LedgerStatus_NotNewer <<choice>>
Checking_LedgerStatus --> Checking_LedgerStatus_NotNewer : [not newer]

Checking_LedgerStatus_Newer --> Checking : [did not gather f+1 newer LSes(x)]
Checking_LedgerStatus_Newer --> CatchingUpLedgers : [gathered f+1 newer LSes(x)] / lastTxn3PCs = []; StartLedgerCatchup(0)

Checking_LedgerStatus_NotNewer --> Checking : [did not gather n-f-1 not newer LSes(x)]
Checking_LedgerStatus_NotNewer --> Finished : [gathered n-f-1 not newer LSes(x)]

state CatchingUpLedgers_LedgerCatchupFinished <<choice>>
CatchingUpLedgers --> CatchingUpLedgers_LedgerCatchupFinished : LedgerCatchupFinished(i, lastTxn3PC) / lastTxn3PCs.append(lastTxn3PC)

CatchingUpLedgers_LedgerCatchupFinished --> CatchingUpLedgers : [i+1 < len(ledgers)] / StartLedgerCatchup(i+1)
CatchingUpLedgers_LedgerCatchupFinished --> Finished : [i+1 == len(ledgers)] / last3PC = max(lastTxn3PCs); CatchupFinished(last3PC)

@enduml
